1. Basic information
Team Number: 11
Student ID# of Submitter: 1375886
Name of Submitter: Travis Takai
ID#s and Names for others on the Team:
-Brad Bernard 1426712
-Johannes Pitz 1442286

2. Internal Record Format
- Show your record format design and describe how your design satisfies O(1) field access. If not, just mention that you haven't implemented this feature.
	
	-Our records use the following structure:
		| Field Count | Null Bit-Vector | Directory of offsets to end of field value | Values for Corresponding Fields |
	-We based the structure off of the Variable Length record-format on slide 11 of lecture 3.
	-The count and all of our directory offsets use a uint16_t since it is large enough to represent any feasible offset as well as halving the space used by an int.
	-It provides O(1) accessibility because we know how many fields are present and/or null and we can calculate the offset directly to a field.
    -We have an directory entry even for fields that are null, but there is no space wasted for the data.

- Describe how you store a VarChar field.

	-The offset of each field determines the length so we can avoid storing empty space if the VarChar is less than the max character limit.
	-We use the field offsets to calculate how long a given VarChar field is and only retrieve the exact length of it.
	-We read the first four bytes as an integer to determine length of the VarChar data for the current input record format.

3. Page Format
- Show your page format design
	
	-Our page format is such that:
		-Each pages' last 2 bytes represents the free space offset (uint16_t byte offset within page).
		-The second to last 2 bytes on a page represents the number of records in a page (uint16_t count).
		-The following 4 byte groups are ordered by slot number ascending and each group is a tuple of (offset of record within page (uint16_t), length of record (uint16_t)).
        -The rid slot num's begin with 1 and not with 0 (could easily be fixed, but there were no requirements on this).

4. Implementation Detail
- Other implementation details goes here.

	-In order to determine where/if there is free space to insert a record, we start from the the last page (current page).
	-If there is no free space in that page, we cycle through the pages in the file starting from the first one looking for free space (We do check the last one twice, but that's not a big deal).
	-If there is no free space in any of the pages we append a new page to the file with the given data. 

5. Other (optional)
- Freely use this section to tell us about things that are related to the project 1, but not related to the other sections (optional).
- Created our own test script to modify the records to make sure our classes actually worked.
- Also free'd up some of the test scripts memory leaks: we got down to two bytes for each of the pointers from the instance functions and to free those we made a static function that 'delete'd the
 instance pointers but this had to be called at the end of the test script. We removed it at the end but thats how we did it to get no memory leaks. 
- We named our custom test script custom_rbftest.cc and copied the original back into our directory.
- Our read returns an error if the count in the database and in the record descriptor don't match.
